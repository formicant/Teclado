using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Formicant;

namespace Teclado.Common
{
	public struct VirtKey : IEquatable<VirtKey>
	{
		public VirtKey(byte code) : this()
		{
			Code = code;
		}

		public VirtKey(string name) : this()
		{
			Code = ByName.GetValueOrDefault(name.ToLowerInvariant());
		}

		public byte Code { get; }

		public bool IsNotNone => Code != 0;

		public bool IsNone => Code == 0;

		public string Name =>
			LowercaseFirstLetter(Scancode.Names.GetValueOrDefault(Scancodes.GetValueOrDefault(Code))?[0]) ?? $"k{Code:X2}";

		public static readonly VirtKey None = default(VirtKey);

		#region Equality

		public bool Equals(VirtKey other) =>
			Code.Equals(other.Code);

		public override bool Equals(object obj) =>
			obj is VirtKey && Equals((VirtKey)obj);

		public override int GetHashCode() =>
			Code.GetHashCode();

		public static bool operator ==(VirtKey sc1, VirtKey sc2) =>
			sc1.Equals(sc2);

		public static bool operator !=(VirtKey sc1, VirtKey sc2) =>
			!sc1.Equals(sc2);

		#endregion

		public override string ToString() => Name;

		static readonly Dictionary<byte, byte> Scancodes = new Dictionary<byte, byte>
		{
			#region virtkey-scancode default correspondence
			[0x1B] = 0x01,
			[0x70] = 0x3B,
			[0x71] = 0x3C,
			[0x72] = 0x3D,
			[0x73] = 0x3E,
			[0x74] = 0x3F,
			[0x75] = 0x40,
			[0x76] = 0x41,
			[0x77] = 0x42,
			[0x78] = 0x43,
			[0x79] = 0x44,
			[0x7A] = 0x57,
			[0x7B] = 0x58,
			[0xC0] = 0x29,
			[0x31] = 0x02,
			[0x32] = 0x03,
			[0x33] = 0x04,
			[0x34] = 0x05,
			[0x35] = 0x06,
			[0x36] = 0x07,
			[0x37] = 0x08,
			[0x38] = 0x09,
			[0x39] = 0x0A,
			[0x30] = 0x0B,
			[0xBD] = 0x0C,
			[0xBB] = 0x0D,
			[0x08] = 0x0E,
			[0x09] = 0x0F,
			[0x51] = 0x10,
			[0x57] = 0x11,
			[0x45] = 0x12,
			[0x52] = 0x13,
			[0x54] = 0x14,
			[0x59] = 0x15,
			[0x55] = 0x16,
			[0x49] = 0x17,
			[0x4F] = 0x18,
			[0x50] = 0x19,
			[0xDB] = 0x1A,
			[0xDD] = 0x1B,
			[0xDC] = 0x2B,
			[0x14] = 0x3A,
			[0x41] = 0x1E,
			[0x53] = 0x1F,
			[0x44] = 0x20,
			[0x46] = 0x21,
			[0x47] = 0x22,
			[0x48] = 0x23,
			[0x4A] = 0x24,
			[0x4B] = 0x25,
			[0x4C] = 0x26,
			[0xBA] = 0x27,
			[0xDE] = 0x28,
			[0x0D] = 0x1C,
			[0xA0] = 0x2A,
			[0xE2] = 0x56,
			[0x5A] = 0x2C,
			[0x58] = 0x2D,
			[0x43] = 0x2E,
			[0x56] = 0x2F,
			[0x42] = 0x30,
			[0x4E] = 0x31,
			[0x4D] = 0x32,
			[0xBC] = 0x33,
			[0xBE] = 0x34,
			[0xBF] = 0x35,
			[0xA1] = 0xB6,
			[0xA2] = 0x1D,
			[0x5B] = 0xDB,
			[0xA4] = 0x38,
			[0x20] = 0x39,
			[0xA5] = 0xB8,
			[0x5C] = 0xDC,
			[0x5D] = 0xDD,
			[0xA3] = 0x9D,
			[0x2C] = 0xB7,
			[0x91] = 0x46,
			[0x13] = 0x45,
			[0x2D] = 0xD2,
			[0x24] = 0xC7,
			[0x21] = 0xC9,
			[0x2E] = 0xD3,
			[0x23] = 0xCF,
			[0x22] = 0xD1,
			[0x26] = 0xC8,
			[0x25] = 0xCB,
			[0x28] = 0xD0,
			[0x27] = 0xCD,
			[0x90] = 0xC5,
			[0x6F] = 0xB5,
			[0x6A] = 0x37,
			[0x6D] = 0x4A,
			[0x67] = 0x47,
			[0x68] = 0x48,
			[0x69] = 0x49,
			[0x6B] = 0x4E,
			[0x64] = 0x4B,
			[0x65] = 0x4C,
			[0x66] = 0x4D,
			[0x61] = 0x4F,
			[0x62] = 0x50,
			[0x63] = 0x51,
			[0x0D] = 0x9C,
			[0x60] = 0x52,
			[0x6E] = 0x53,
			#endregion
		};

		static readonly Dictionary<string, byte> ByName =
			Enumerable.Range(0, 0x100)
				.Select(k => new KeyValuePair<byte, string>((byte)k, $"k{k:x2}"))
				.Concat(Scancodes.SelectMany(k =>
					Scancode.Names.GetValueOrDefault(k.Value)
						.Select(name => new KeyValuePair<byte, string>(k.Key, name.ToLowerInvariant()))))
				.ToDictionary(k => k.Value, k => k.Key);

		static string LowercaseFirstLetter(string str) =>
			str.IsNotEmpty() ? str.Substring(0, 1).ToLowerInvariant() + str.Substring(1) : str;
	}
}
